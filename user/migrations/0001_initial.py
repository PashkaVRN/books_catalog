# Generated by Django 3.2.16 on 2023-04-22 15:22

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone
import phonenumber_field.modelfields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='DeletedReaders',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(help_text='Введите username пользователя', max_length=100, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='Username')),
                ('first_name', models.CharField(help_text='Введите Имя', max_length=50, verbose_name='Имя читателя')),
                ('last_name', models.CharField(help_text='Введите Фамилию', max_length=50, verbose_name='Фамилия читателя')),
                ('email', models.EmailField(help_text='Введите электронную почту', max_length=254, unique=True, verbose_name='email читателя')),
                ('phone_number', phonenumber_field.modelfields.PhoneNumberField(max_length=128, region=None, unique=True)),
                ('reputation', models.IntegerField(verbose_name='Рейтинг Читателя')),
                ('deleted_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата удаления профиля.')),
            ],
            options={
                'verbose_name': 'Удаленный Читатель',
                'verbose_name_plural': 'Удаленные Читатели',
                'ordering': ('username',),
            },
        ),
        migrations.CreateModel(
            name='Readers',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(help_text='Введите username пользователя', max_length=100, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='Username')),
                ('first_name', models.CharField(help_text='Введите Имя', max_length=50, verbose_name='Имя читателя')),
                ('last_name', models.CharField(help_text='Введите Фамилию', max_length=50, verbose_name='Фамилия читателя')),
                ('email', models.EmailField(help_text='Введите электронную почту', max_length=254, unique=True, verbose_name='email читателя')),
                ('phone_number', phonenumber_field.modelfields.PhoneNumberField(max_length=128, region=None, unique=True)),
                ('reputation', models.IntegerField(default=10, verbose_name='Рейтинг Читателя')),
                ('role', models.CharField(choices=[('reader', 'reader'), ('moderator', 'moderator'), ('admin', 'admin')], default='reader', help_text='Выберите роль пользователя', max_length=9, verbose_name='Пользовательская роль')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Читатель',
                'verbose_name_plural': 'Читатели',
                'ordering': ('username',),
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
